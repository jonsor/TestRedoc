{
  "openapi": "3.0.1",
  "info": {
    "title": "ZData Banking Api",
    "version": "v3"
  },
  "paths": {
    "/api/v3/accounts/bank": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "POST request for new bank integration",
        "requestBody": {
          "description": "Update model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  },
  "CompanyId": "b083ab47-0460-4805-9cfe-e0e73e98089b",
  "AccountNumber": "123456789012"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  },
  "CompanyId": "b083ab47-0460-4805-9cfe-e0e73e98089b",
  "AccountNumber": "123456789012"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  },
  "CompanyId": "b083ab47-0460-4805-9cfe-e0e73e98089b",
  "AccountNumber": "123456789012"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  },
  "CompanyId": "b083ab47-0460-4805-9cfe-e0e73e98089b",
  "AccountNumber": "123456789012"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns account id. Request added for ZData approval",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Invalid model",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accounts/{companyId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Lists all accounts for a company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of accounts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyAccountsResponse"
                },
                "example": {
  "CompanyId": "d800479c-df58-4ed3-bd17-3b4c7122c10e",
  "Accounts": [
    {
      "AccountId": "f619c58c-850f-40ad-84e9-b7303b816a00",
      "AccountNumber": "123456789012",
      "Bic": "DNBANOKK",
      "Currency": "NOK",
      "AccountGroupId": "48af85fb-bfb9-49c8-bcc4-f88b5c72f69a",
      "Ledger": "1920",
      "Aliases": {
        "Iban": "NO22123456789012",
        "PlusGirot": "1234567",
        "BankGirot": "1234567",
        "GiroKonto": "1234567"
      }
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyAccountsResponse"
                },
                "example": {
  "CompanyId": "d800479c-df58-4ed3-bd17-3b4c7122c10e",
  "Accounts": [
    {
      "AccountId": "f619c58c-850f-40ad-84e9-b7303b816a00",
      "AccountNumber": "123456789012",
      "Bic": "DNBANOKK",
      "Currency": "NOK",
      "AccountGroupId": "48af85fb-bfb9-49c8-bcc4-f88b5c72f69a",
      "Ledger": "1920",
      "Aliases": {
        "Iban": "NO22123456789012",
        "PlusGirot": "1234567",
        "BankGirot": "1234567",
        "GiroKonto": "1234567"
      }
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyAccountsResponse"
                },
                "example": {
  "CompanyId": "d800479c-df58-4ed3-bd17-3b4c7122c10e",
  "Accounts": [
    {
      "AccountId": "f619c58c-850f-40ad-84e9-b7303b816a00",
      "AccountNumber": "123456789012",
      "Bic": "DNBANOKK",
      "Currency": "NOK",
      "AccountGroupId": "48af85fb-bfb9-49c8-bcc4-f88b5c72f69a",
      "Ledger": "1920",
      "Aliases": {
        "Iban": "NO22123456789012",
        "PlusGirot": "1234567",
        "BankGirot": "1234567",
        "GiroKonto": "1234567"
      }
    }
  ]
}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Accounts for company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accounts/{bban}/readiness": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account status for creating payments",
        "parameters": [
          {
            "name": "bban",
            "in": "path",
            "description": "BBAN",
            "required": true,
            "schema": {
              "type": "string",
              "description": "BBAN",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account status for creating payments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AccountReadinessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountReadinessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountReadinessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accounts/{companyId}/{bankAccountId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get account data for a specific account in a specific company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "Bank account id or bban",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Bank account id or bban",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "ca9233a2-7b65-4343-ad8c-993dc7554f25",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "2f65670d-2a24-419b-aeb3-cef0ad5147ad",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "ca9233a2-7b65-4343-ad8c-993dc7554f25",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "2f65670d-2a24-419b-aeb3-cef0ad5147ad",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "ca9233a2-7b65-4343-ad8c-993dc7554f25",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "2f65670d-2a24-419b-aeb3-cef0ad5147ad",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Updates bankaccount",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "Bank account id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Bank account id",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Bank account model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBankAccountRequest"
              },
              "example": {
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated account details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "841a5281-0f3c-44d9-8fae-e95571b65eaf",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "1d1ab5c6-36b2-4cf9-b3b0-327e3c1e4f90",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "841a5281-0f3c-44d9-8fae-e95571b65eaf",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "1d1ab5c6-36b2-4cf9-b3b0-327e3c1e4f90",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "841a5281-0f3c-44d9-8fae-e95571b65eaf",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "1d1ab5c6-36b2-4cf9-b3b0-327e3c1e4f90",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              }
            }
          },
          "400": {
            "description": "Invalid update request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes an account by companyId and accountId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "Bank account id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Bank account id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Account connected to statement, balance, receivable or payment",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/v3/accounts/{bankAccountId}/companySwitch": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Changes company on bankaccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "Bank account id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Bank account id",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Request with new company id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCompanySwitchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCompanySwitchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCompanySwitchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCompanySwitchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "00f0729c-f1da-4724-b293-9b1d524abb07",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "b821139b-43d3-4d72-9685-5d2fa66fa92e",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "00f0729c-f1da-4724-b293-9b1d524abb07",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "b821139b-43d3-4d72-9685-5d2fa66fa92e",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                },
                "example": {
  "AccountId": "00f0729c-f1da-4724-b293-9b1d524abb07",
  "AccountNumber": "123456789012",
  "Bic": "DNBANOKK",
  "Currency": "NOK",
  "AccountGroupId": "b821139b-43d3-4d72-9685-5d2fa66fa92e",
  "Ledger": "1920",
  "Aliases": {
    "Iban": "NO22123456789012",
    "PlusGirot": "1234567",
    "BankGirot": "1234567",
    "GiroKonto": "1234567"
  }
}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Get all account groups for company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "includeUnassociated",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "description": "",
              "default": false
            }
          },
          {
            "name": "includeUnassociatedDaughters",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "description": "",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account groups for company",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}/{accountGroupId}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Get account group by AccountGroupId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account groups",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account group not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Update account group name",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupNameRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupNameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupNameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupNameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account group not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Delete account group",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Account group not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups": {
      "post": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Post new account group",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}/{accountGroupId}/user": {
      "post": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Add user to account group",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupUserRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User/Account group not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}/{accountGroupId}/user/{userId}": {
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Remove user from account group",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User/Account group not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}/{accountGroupId}/account": {
      "post": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Add account to account group",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupAccountRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountGroupAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "AccountGroup/Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/accountgroups/{companyId}/{accountGroupId}/account/{accountId}": {
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Remove account from account group",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accountGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountGroupResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "AccountGroup/Account not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/balances/{companyId}/{account}": {
      "get": {
        "tags": [
          "Balance"
        ],
        "summary": "Get balance for account.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company Id",
              "format": "uuid"
            }
          },
          {
            "name": "account",
            "in": "path",
            "description": "Account number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Account number",
              "nullable": true
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date (yyyy-mm-dd). Returns balance. When no balance, returns the nearest older balance.",
            "schema": {
              "type": "string",
              "description": "Date (yyyy-mm-dd). Returns balance. When no balance, returns the nearest older balance.",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "dateSwitch",
            "in": "query",
            "description": "False, same as above.  When True , Returns balance. When no balance, returns the nearest newer balance.",
            "schema": {
              "type": "boolean",
              "description": "False, same as above.  When True , Returns balance. When no balance, returns the nearest newer balance.",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid state"
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Balance not found"
          }
        }
      }
    },
    "/api/v3/companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets details for all valid companies",
        "description": "Subject to change. Data may be migrated to another API",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Optional state filter",
            "schema": {
              "$ref": "#/components/schemas/CompanyState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flat list of valid companies",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create new company for ZData approval",
        "requestBody": {
          "description": "Company model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyRequest"
              },
              "example": {
  "CompanyId": "85992e1f-b494-4051-acea-e1911e6249f0",
  "Name": "Duck corp",
  "Address": "Apalveien 222",
  "ZipCode": "0010",
  "ZipArea": "Oslo",
  "Country": "Norway"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyRequest"
              },
              "example": {
  "CompanyId": "85992e1f-b494-4051-acea-e1911e6249f0",
  "Name": "Duck corp",
  "Address": "Apalveien 222",
  "ZipCode": "0010",
  "ZipArea": "Oslo",
  "Country": "Norway"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyRequest"
              },
              "example": {
  "CompanyId": "85992e1f-b494-4051-acea-e1911e6249f0",
  "Name": "Duck corp",
  "Address": "Apalveien 222",
  "ZipCode": "0010",
  "ZipArea": "Oslo",
  "Country": "Norway"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewCompanyRequest"
              },
              "example": {
  "CompanyId": "85992e1f-b494-4051-acea-e1911e6249f0",
  "Name": "Duck corp",
  "Address": "Apalveien 222",
  "ZipCode": "0010",
  "ZipArea": "Oslo",
  "Country": "Norway"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "\"Company id\"",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/companies/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets company details",
        "description": "Subject to change. Data may be migrated to another API",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company dto",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDetailResponse"
                },
                "example": {
  "Name": "Z Data AS",
  "Address": "Damsgårdsveien 167",
  "ZipCode": "5160",
  "ZipArea": "Laksevåg",
  "Country": "Norge",
  "OrganizationNumber": "976197976",
  "CompanyId": "41f1789e-d82d-4b5a-bade-bff87d41a683",
  "State": 1
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDetailResponse"
                },
                "example": {
  "Name": "Z Data AS",
  "Address": "Damsgårdsveien 167",
  "ZipCode": "5160",
  "ZipArea": "Laksevåg",
  "Country": "Norge",
  "OrganizationNumber": "976197976",
  "CompanyId": "41f1789e-d82d-4b5a-bade-bff87d41a683",
  "State": 1
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDetailResponse"
                },
                "example": {
  "Name": "Z Data AS",
  "Address": "Damsgårdsveien 167",
  "ZipCode": "5160",
  "ZipArea": "Laksevåg",
  "Country": "Norge",
  "OrganizationNumber": "976197976",
  "CompanyId": "41f1789e-d82d-4b5a-bade-bff87d41a683",
  "State": 1
}
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Deactivate company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"Company id\""
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/api/v3/companies/{companyId}/subsidiaries": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets company subsidiaries",
        "description": "Subject to change. Data may be migrated to another API",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subsidiary dto's",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyDetailResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/companies/{companyId}/users": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Gets company users",
        "description": "Subject to change. Data may be migrated to another API",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\"Company id\"",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/events/deadletters/{eventId}": {
      "get": {
        "tags": [
          "EventGridDeadLetter"
        ],
        "summary": "Get dead letter event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventContentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventContentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventContentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Dead letter event not found"
          }
        }
      },
      "delete": {
        "tags": [
          "EventGridDeadLetter"
        ],
        "summary": "Delete dead letter event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Dead letter event not found"
          }
        }
      }
    },
    "/api/v3/events/deadletters": {
      "get": {
        "tags": [
          "EventGridDeadLetter"
        ],
        "summary": "Get list of dead letter event metadata for client",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              }
            }
          },
          "404": {
            "description": "No dead letter events found for client"
          }
        }
      }
    },
    "/api/v3/events/companies/{companyId}/deadletters": {
      "get": {
        "tags": [
          "EventGridDeadLetter"
        ],
        "summary": "Get list of dead letter event metadata for company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeadLetterEventResponsePaginatedResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No dead letter events found for company"
          }
        }
      }
    },
    "/api/v3/events/companies/{companyId}/subscriptions/{subscriptionName}/deadletters": {
      "get": {
        "tags": [
          "EventGridDeadLetter"
        ],
        "summary": "Get list of dead letter event metadata for subscription",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "subscriptionName",
            "in": "path",
            "description": "Subscription name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription name",
              "nullable": true
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeadLetterEventResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeadLetterEventResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeadLetterEventResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No dead letter events found for subscription"
          }
        }
      }
    },
    "/api/v3/companies/{companyId}/subscriptions": {
      "get": {
        "tags": [
          "EventGridSubscription"
        ],
        "summary": "Get event subscriptions for company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v3/companies/{companyId}/subscriptions/{subscriptionName}": {
      "get": {
        "tags": [
          "EventGridSubscription"
        ],
        "summary": "Get subscription",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "subscriptionName",
            "in": "path",
            "description": "Subscription name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription name",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Subscription not found"
          }
        }
      },
      "put": {
        "tags": [
          "EventGridSubscription"
        ],
        "summary": "Create or update event subscription",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "subscriptionName",
            "in": "path",
            "description": "Subscription name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription name",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Event subscription",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "EventGridSubscription"
        ],
        "summary": "Delete event subscription",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "subscriptionName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Event subscription not found"
          }
        }
      }
    },
    "/api/v3/subscriptions/{subscriptionName}": {
      "put": {
        "tags": [
          "EventGridSubscription"
        ],
        "summary": "Create or update event subscription for multiple companies",
        "parameters": [
          {
            "name": "subscriptionName",
            "in": "path",
            "description": "Subscription name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription name",
              "nullable": true
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Event subscription batch",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionCompanyIdsBatchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionCompanyIdsBatchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionCompanyIdsBatchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionCompanyIdsBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEventSubscriptionResponsePaginatedResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Company ids not found"
          }
        }
      }
    },
    "/api/v3/onboarding/{bic}": {
      "get": {
        "tags": [
          "Onboarding"
        ],
        "summary": "Returns an onboarding instruction on for the provided BIC",
        "parameters": [
          {
            "name": "bic",
            "in": "path",
            "description": "The bank's BIC code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The bank's BIC code",
              "nullable": true
            }
          },
          {
            "name": "languageCode",
            "in": "query",
            "description": "Language code (EN, NO, SE, DK, etc), defaults to NO",
            "schema": {
              "type": "string",
              "description": "Language code (EN, NO, SE, DK, etc), defaults to NO",
              "default": "NO",
              "nullable": true
            }
          },
          {
            "name": "payments",
            "in": "query",
            "description": "Include onboarding info for payments (if applicable)",
            "schema": {
              "type": "boolean",
              "description": "Include onboarding info for payments (if applicable)",
              "default": false
            }
          },
          {
            "name": "receivables",
            "in": "query",
            "description": "Include onboarding info for receivables (if applicable)",
            "schema": {
              "type": "boolean",
              "description": "Include onboarding info for receivables (if applicable)",
              "default": false
            }
          },
          {
            "name": "statements",
            "in": "query",
            "description": "Include onboarding info for statements (if applicable)",
            "schema": {
              "type": "boolean",
              "description": "Include onboarding info for statements (if applicable)",
              "default": false
            }
          },
          {
            "name": "balances",
            "in": "query",
            "description": "Include onboarding info for balances (if applicable)",
            "schema": {
              "type": "boolean",
              "description": "Include onboarding info for balances (if applicable)",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Onboarding instructions as HTML",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid grant type/client"
          }
        }
      }
    },
    "/api/v3/onboarding/preapproval/{account}": {
      "get": {
        "tags": [
          "Onboarding"
        ],
        "summary": "Get whether approval requirement is activated on account",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "Account number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Account number",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalEnabledResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalEnabledResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalEnabledResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/v3/payments/{messageId}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payments by messageId",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Payment message id filter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Payment message id filter",
              "nullable": true
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Pagination: Number to skip (default 0)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Number to skip (default 0)",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Pagination: Max number to return (default 100)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Max number to return (default 100)",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "b840816c-31b9-4f54-81ee-f71fec0843ca",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "b840816c-31b9-4f54-81ee-f71fec0843ca",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "b840816c-31b9-4f54-81ee-f71fec0843ca",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}/batches/{batchId}/transactions": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payments by batchId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Unique Guid for company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for company",
              "format": "uuid"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Unique Guid for the batch",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for the batch",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "c83bb7a1-fdb6-4321-9807-a01cc4e680e3",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "c83bb7a1-fdb6-4321-9807-a01cc4e680e3",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsResponse"
                },
                "example": {
  "Payments": [
    {
      "PaymentId": "c83bb7a1-fdb6-4321-9807-a01cc4e680e3",
      "SourceReference": "100;101;22;6",
      "Status": 6,
      "ExecutionDate": "0001-01-01T00:00:00",
      "Links": [
        {
          "Rel": "payment",
          "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a/c4dc6968-5161-4666-bd21-cee1a3c3ea72"
        }
      ]
    }
  ],
  "Total": 15,
  "Links": [
    {
      "Rel": "first",
      "Href": "https://bankservice.zdata.no/api/v3/payments/8043f884-0a70-40f9-9e57-58347102412a?skip=0&take=100"
    }
  ]
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}/batches/{batchId}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment lines by batchId",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Unique Guid for company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for company",
              "format": "uuid"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Unique Guid for the batch",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for the batch",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "default": 10000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentLineResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentLineResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentLineResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId"
          }
        }
      }
    },
    "/api/v3/payments/{messageId}/{paymentId}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment by sourceReference",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "The unique id for the remittance",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id for the remittance",
              "format": "uuid"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "Payment id of payment line",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Payment id of payment line",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLineResponse"
                },
                "example": {
  "PaymentId": "e92e7946-7689-426b-8c2b-6234942ea93a",
  "Status": 0,
  "RejectionCode": "RR09",
  "RejectionMessage": "ISO Invalid Structured Creditor Reference",
  "Amount": 50.0,
  "Currency": "NOK",
  "ExecutionDate": "0001-01-01T00:00:00",
  "CreditorName": "Kreditor AS",
  "CreditorAccountNumber": "123456789012",
  "CreditorAccountCurrency": "NOK",
  "ChargeAmount": 70.0,
  "ChargeCurrency": "NOK",
  "Description": "Invoice number 32",
  "InvoiceNumber": "Something",
  "Settlement": {
    "BookingDate": "2022-09-01T09:16:15.1708283+02:00",
    "ValueDate": "2022-09-01T09:16:15.1708288+02:00",
    "ExchangeRate": 1.2,
    "Reference": "12345"
  }
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLineResponse"
                },
                "example": {
  "PaymentId": "e92e7946-7689-426b-8c2b-6234942ea93a",
  "Status": 0,
  "RejectionCode": "RR09",
  "RejectionMessage": "ISO Invalid Structured Creditor Reference",
  "Amount": 50.0,
  "Currency": "NOK",
  "ExecutionDate": "0001-01-01T00:00:00",
  "CreditorName": "Kreditor AS",
  "CreditorAccountNumber": "123456789012",
  "CreditorAccountCurrency": "NOK",
  "ChargeAmount": 70.0,
  "ChargeCurrency": "NOK",
  "Description": "Invoice number 32",
  "InvoiceNumber": "Something",
  "Settlement": {
    "BookingDate": "2022-09-01T09:16:15.1708283+02:00",
    "ValueDate": "2022-09-01T09:16:15.1708288+02:00",
    "ExchangeRate": 1.2,
    "Reference": "12345"
  }
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLineResponse"
                },
                "example": {
  "PaymentId": "e92e7946-7689-426b-8c2b-6234942ea93a",
  "Status": 0,
  "RejectionCode": "RR09",
  "RejectionMessage": "ISO Invalid Structured Creditor Reference",
  "Amount": 50.0,
  "Currency": "NOK",
  "ExecutionDate": "0001-01-01T00:00:00",
  "CreditorName": "Kreditor AS",
  "CreditorAccountNumber": "123456789012",
  "CreditorAccountCurrency": "NOK",
  "ChargeAmount": 70.0,
  "ChargeCurrency": "NOK",
  "Description": "Invoice number 32",
  "InvoiceNumber": "Something",
  "Settlement": {
    "BookingDate": "2022-09-01T09:16:15.1708283+02:00",
    "ValueDate": "2022-09-01T09:16:15.1708288+02:00",
    "ExchangeRate": 1.2,
    "Reference": "12345"
  }
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}/summaries": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get summary of payments for company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Unique Guid for company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for company",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Transaction state",
            "schema": {
              "$ref": "#/components/schemas/TransactionState"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Earliest date to be included",
            "schema": {
              "type": "string",
              "description": "Earliest date to be included",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Latest date to be included",
            "schema": {
              "type": "string",
              "description": "Latest date to be included",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyPaymentsResponse"
                },
                "example": {
  "Summaries": [
    {
      "MessageId": "9f414694-7bd4-4647-9a93-33929f549e9c",
      "Timestamp": "2022-09-01T09:16:15.1738225+02:00",
      "FirstExecutionDate": "2022-09-01T09:16:15.1738215+02:00",
      "LastExecutionDate": "2022-09-01T09:16:15.173822+02:00",
      "Amounts": {
        "NOK": 55.0
      },
      "Links": [
        {
          "Rel": "payments",
          "Href": "https://bankservice.zdata.no/api/v3/payments/0a8f02d5-24e1-4ea5-be46-135c2fa4f8c9"
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyPaymentsResponse"
                },
                "example": {
  "Summaries": [
    {
      "MessageId": "9f414694-7bd4-4647-9a93-33929f549e9c",
      "Timestamp": "2022-09-01T09:16:15.1738225+02:00",
      "FirstExecutionDate": "2022-09-01T09:16:15.1738215+02:00",
      "LastExecutionDate": "2022-09-01T09:16:15.173822+02:00",
      "Amounts": {
        "NOK": 55.0
      },
      "Links": [
        {
          "Rel": "payments",
          "Href": "https://bankservice.zdata.no/api/v3/payments/0a8f02d5-24e1-4ea5-be46-135c2fa4f8c9"
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyPaymentsResponse"
                },
                "example": {
  "Summaries": [
    {
      "MessageId": "9f414694-7bd4-4647-9a93-33929f549e9c",
      "Timestamp": "2022-09-01T09:16:15.1738225+02:00",
      "FirstExecutionDate": "2022-09-01T09:16:15.1738215+02:00",
      "LastExecutionDate": "2022-09-01T09:16:15.173822+02:00",
      "Amounts": {
        "NOK": 55.0
      },
      "Links": [
        {
          "Rel": "payments",
          "Href": "https://bankservice.zdata.no/api/v3/payments/0a8f02d5-24e1-4ea5-be46-135c2fa4f8c9"
        }
      ]
    }
  ],
  "Total": 0
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid companyId"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}/movements": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets booked payments for company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Unique Guid for company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for company",
              "format": "uuid"
            }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "Bank account number",
            "schema": {
              "type": "string",
              "description": "Bank account number",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Earliest date to be included",
            "schema": {
              "type": "string",
              "description": "Earliest date to be included",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Latest date to be included",
            "schema": {
              "type": "string",
              "description": "Latest date to be included",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1784701+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1784701+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1784701+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId/sourceReference"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}/batches/{batchId}/movements": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Gets booked payments for settlement",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Unique Guid for company",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for company",
              "format": "uuid"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Unique Guid for the batch",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique Guid for the batch",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of entries to skip",
            "schema": {
              "type": "integer",
              "description": "Number of entries to skip",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Number of entries to return",
            "schema": {
              "type": "integer",
              "description": "Number of entries to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1800149+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1800149+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsMovementsResponse"
                },
                "example": {
  "BookedPayments": [
    {
      "BookedAmount": 55.0,
      "AccountCurrency": "NOK",
      "ExchangeRate": 0.0,
      "BookingDate": "2022-09-01T09:16:15.1800149+02:00",
      "BankReference": "123321",
      "ChargeAmount": 66.0,
      "ChargeCurrency": "NOK",
      "Payments": [
        {
          "PaymentId": "00000000-0000-0000-0000-000000000000",
          "MessageId": "00000000-0000-0000-0000-000000000000",
          "Links": [
            {
              "Rel": "payment",
              "Href": "http://bankservice.zdata.no/api/v3/payments/5cfd18e2-f37b-4d67-9661-f897b152d459/d0bde9d1-569d-4f5c-aaa7-f8197631fe23"
            }
          ]
        }
      ]
    }
  ],
  "Total": 0
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid companyId/settlementId"
          }
        }
      }
    },
    "/api/v3/payments/{messageId}/dismiss": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Dismiss payments",
        "description": "Tokens provided to this endpoint must use implicit or authorization code grant type flows.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "The unique id for the payments",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id for the payments",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Rejection message",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RejectionDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectionDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectionDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RejectionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Already approved, Missing access to bankaccounts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDismissalResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Remittance not found"
          }
        }
      }
    },
    "/api/v3/payments/{messageId}/approve": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Approves payments by message id.",
        "description": "Tokens provided to this endpoint must use implicit or authorization code grant type flows.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "The unique id for the payments",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id for the payments",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Already reviewed, Payments were approved",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "headers": {
              "WWW-Authenticate": {
                "description": "Contains authentication method used to gain access to resource",
                "schema": {
                  "type": "string",
                  "description": "Contains authentication method used to gain access to resource",
                  "format": ""
                }
              },
              "X-Authentication-Reason": {
                "description": "Contains keywords that describe why access is not granted. These values can be provided as acr_values to token server for user verification",
                "schema": {
                  "type": "string",
                  "description": "Contains keywords that describe why access is not granted. These values can be provided as acr_values to token server for user verification",
                  "format": ""
                }
              }
            }
          },
          "404": {
            "description": "Remittance not found"
          }
        }
      },
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment approval data",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Payment message id filter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Payment message id filter",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentApprovalInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Invalid messageId"
          }
        }
      }
    },
    "/api/v3/payments/{companyId}": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Submits payments for an account.\r\n<br>The AccountNumber MUST be owned by the company and in an account group that the user has access to.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentsRequest"
              },
              "example": {
  "MessageId": "408afdf7-b509-47c5-9439-7d4078a5888f",
  "AccountNumber": "52011976166",
  "SinglePayments": false,
  "PaymentLines": [
    {
      "PaymentMethod": 1,
      "Priority": 1,
      "PaymentPurpose": 0,
      "ExecutionDate": "2022-09-08T00:00:00+02:00",
      "SourceReference": "12346",
      "RegulatoryReportingCode": 14,
      "RegulatoryReportingInfo": "Kjøp og salg",
      "Amount": 1.0,
      "Currency": "NOK",
      "InvoiceNo": "21515",
      "Creditor": {
        "Name": "Ola Nordmann",
        "CountryCode": "NO",
        "AccountNumber": "NO8595220610722",
        "Bic": "HANDNOKK",
        "AccountType": 0,
        "Address": "Veien 4",
        "ZipCode": "4250",
        "ZipArea": "Kopervik"
      }
    }
  ]
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentsRequest"
              },
              "example": {
  "MessageId": "408afdf7-b509-47c5-9439-7d4078a5888f",
  "AccountNumber": "52011976166",
  "SinglePayments": false,
  "PaymentLines": [
    {
      "PaymentMethod": 1,
      "Priority": 1,
      "PaymentPurpose": 0,
      "ExecutionDate": "2022-09-08T00:00:00+02:00",
      "SourceReference": "12346",
      "RegulatoryReportingCode": 14,
      "RegulatoryReportingInfo": "Kjøp og salg",
      "Amount": 1.0,
      "Currency": "NOK",
      "InvoiceNo": "21515",
      "Creditor": {
        "Name": "Ola Nordmann",
        "CountryCode": "NO",
        "AccountNumber": "NO8595220610722",
        "Bic": "HANDNOKK",
        "AccountType": 0,
        "Address": "Veien 4",
        "ZipCode": "4250",
        "ZipArea": "Kopervik"
      }
    }
  ]
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentsRequest"
              },
              "example": {
  "MessageId": "408afdf7-b509-47c5-9439-7d4078a5888f",
  "AccountNumber": "52011976166",
  "SinglePayments": false,
  "PaymentLines": [
    {
      "PaymentMethod": 1,
      "Priority": 1,
      "PaymentPurpose": 0,
      "ExecutionDate": "2022-09-08T00:00:00+02:00",
      "SourceReference": "12346",
      "RegulatoryReportingCode": 14,
      "RegulatoryReportingInfo": "Kjøp og salg",
      "Amount": 1.0,
      "Currency": "NOK",
      "InvoiceNo": "21515",
      "Creditor": {
        "Name": "Ola Nordmann",
        "CountryCode": "NO",
        "AccountNumber": "NO8595220610722",
        "Bic": "HANDNOKK",
        "AccountType": 0,
        "Address": "Veien 4",
        "ZipCode": "4250",
        "ZipArea": "Kopervik"
      }
    }
  ]
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentsRequest"
              },
              "example": {
  "MessageId": "408afdf7-b509-47c5-9439-7d4078a5888f",
  "AccountNumber": "52011976166",
  "SinglePayments": false,
  "PaymentLines": [
    {
      "PaymentMethod": 1,
      "Priority": 1,
      "PaymentPurpose": 0,
      "ExecutionDate": "2022-09-08T00:00:00+02:00",
      "SourceReference": "12346",
      "RegulatoryReportingCode": 14,
      "RegulatoryReportingInfo": "Kjøp og salg",
      "Amount": 1.0,
      "Currency": "NOK",
      "InvoiceNo": "21515",
      "Creditor": {
        "Name": "Ola Nordmann",
        "CountryCode": "NO",
        "AccountNumber": "NO8595220610722",
        "Bic": "HANDNOKK",
        "AccountType": 0,
        "Address": "Veien 4",
        "ZipCode": "4250",
        "ZipArea": "Kopervik"
      }
    }
  ]
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/receivables/{companyId}/{state}": {
      "get": {
        "tags": [
          "Receivable"
        ],
        "summary": "Get incoming payments",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company Id",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "path",
            "description": "Receivable state filter",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InpaymentState"
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Account filter (optional)",
            "schema": {
              "type": "string",
              "description": "Account filter (optional)",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Time frame limitation",
            "schema": {
              "type": "string",
              "description": "Time frame limitation",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Time frame limitation",
            "schema": {
              "type": "string",
              "description": "Time frame limitation",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Pagination: Max number to return (default 100)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Max number to return (default 100)",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Pagination: Number to skip (default 0)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Number to skip (default 0)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "1d88c051-531b-4be0-9fbc-eef98696dcfb",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1934674+02:00",
      "ValueDate": "2022-09-01T09:16:15.1934682+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "1d88c051-531b-4be0-9fbc-eef98696dcfb",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1934674+02:00",
      "ValueDate": "2022-09-01T09:16:15.1934682+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "1d88c051-531b-4be0-9fbc-eef98696dcfb",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1934674+02:00",
      "ValueDate": "2022-09-01T09:16:15.1934682+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              }
            }
          },
          "400": {
            "description": "\"Invalid state\""
          },
          "401": {
            "description": "User not authorized"
          }
        }
      }
    },
    "/api/v3/receivables/{companyId}/batches/{batchId}/transactions": {
      "get": {
        "tags": [
          "Receivable"
        ],
        "summary": "Get receivables for a given file. Only valid with client credentials flow",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company Id",
              "format": "uuid"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Batch id",
              "format": "uuid"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Pagination: Max number to return (default 100)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Max number to return (default 100)",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Pagination: Number to skip (default 0)",
            "schema": {
              "type": "integer",
              "description": "Pagination: Number to skip (default 0)",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableDtoPaginatedResult"
                },
                "example": {
  "TotalCount": 1,
  "Skip": 0,
  "Take": 10,
  "Items": [
    {
      "ReceivableId": "a52dd0d5-9f62-4751-ada5-813b9d3a291d",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1954614+02:00",
      "ValueDate": "2022-09-01T09:16:15.1954622+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableDtoPaginatedResult"
                },
                "example": {
  "TotalCount": 1,
  "Skip": 0,
  "Take": 10,
  "Items": [
    {
      "ReceivableId": "a52dd0d5-9f62-4751-ada5-813b9d3a291d",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1954614+02:00",
      "ValueDate": "2022-09-01T09:16:15.1954622+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableDtoPaginatedResult"
                },
                "example": {
  "TotalCount": 1,
  "Skip": 0,
  "Take": 10,
  "Items": [
    {
      "ReceivableId": "a52dd0d5-9f62-4751-ada5-813b9d3a291d",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1954614+02:00",
      "ValueDate": "2022-09-01T09:16:15.1954622+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ]
}
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Id not found"
          }
        }
      }
    },
    "/api/v3/receivables/{companyId}/batches/{batchId}": {
      "put": {
        "tags": [
          "Receivable"
        ],
        "summary": "Change state of all receivables in batch.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company Id",
              "format": "uuid"
            }
          },
          {
            "name": "batchId",
            "in": "path",
            "description": "Batch id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Batch id",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesBatchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesBatchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesBatchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Id not found"
          }
        }
      }
    },
    "/api/v3/receivables/update": {
      "post": {
        "tags": [
          "Receivable"
        ],
        "summary": "Update transaction state",
        "requestBody": {
          "description": "Update model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesRequest"
              },
              "example": {
  "State": 2,
  "ErrorMessage": "Something failed",
  "Id": "fcb73193-5d0f-4a1f-8101-e513faae2894"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesRequest"
              },
              "example": {
  "State": 2,
  "ErrorMessage": "Something failed",
  "Id": "fcb73193-5d0f-4a1f-8101-e513faae2894"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesRequest"
              },
              "example": {
  "State": 2,
  "ErrorMessage": "Something failed",
  "Id": "fcb73193-5d0f-4a1f-8101-e513faae2894"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReceivablesRequest"
              },
              "example": {
  "State": 2,
  "ErrorMessage": "Something failed",
  "Id": "fcb73193-5d0f-4a1f-8101-e513faae2894"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated states",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "d3dccc89-7d28-43e5-8283-0405c560587a",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1980506+02:00",
      "ValueDate": "2022-09-01T09:16:15.1980514+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "d3dccc89-7d28-43e5-8283-0405c560587a",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1980506+02:00",
      "ValueDate": "2022-09-01T09:16:15.1980514+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivablesResponse"
                },
                "example": {
  "State": 0,
  "Receivables": [
    {
      "ReceivableId": "d3dccc89-7d28-43e5-8283-0405c560587a",
      "AccountNumber": "123456789012",
      "DebtorAccountNumber": "098765432112",
      "DebtorName": "Donald Duck",
      "DebtorAddress": "Veien 12A",
      "ArchiveReference": "1234",
      "Description": "Submitted to Onkel Skrue",
      "InvoiceNumber": "12345",
      "BookingDate": "2022-09-01T09:16:15.1980506+02:00",
      "ValueDate": "2022-09-01T09:16:15.1980514+02:00",
      "Amount": 55.0,
      "Currency": "NOK",
      "BookedAmount": 65.0,
      "AccountCurrency": "NOK",
      "ChargeAmount": 10.0,
      "ChargeCurrency": "NOK",
      "Type": 0
    }
  ],
  "Total": 0
}
              }
            }
          },
          "400": {
            "description": "\"Invalid model\"",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Incoming payment id not found"
          }
        }
      }
    },
    "/api/v3/receipt/suppliernotification/{companyId}": {
      "get": {
        "tags": [
          "Recipients"
        ],
        "summary": "Lists all payments recipients for a company",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company identification",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company identification",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of recipients",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Recipients for company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Recipients"
        ],
        "summary": "Create new recipient",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientRequest"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Recipients for company not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/receipt/suppliernotification/{companyId}/{recipientId}": {
      "put": {
        "tags": [
          "Recipients"
        ],
        "summary": "Update recipient",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "recipientId",
            "in": "path",
            "description": "Id of recipient",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of recipient",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Update model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRecipientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipientRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipientRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRecipientRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Recipient not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Recipients"
        ],
        "summary": "Delete recipient",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "recipientId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRecipientResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Action not permitted for user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Recipient not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/services/bank": {
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "POST request for new bank integration",
        "requestBody": {
          "description": "Model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankServiceRequest"
              },
              "example": {
  "CompanyId": "83085eff-9d79-4c31-af78-d0ff8c3dcf74",
  "Bic": "DNBANOKK",
  "BankApproval": true
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankServiceRequest"
              },
              "example": {
  "CompanyId": "83085eff-9d79-4c31-af78-d0ff8c3dcf74",
  "Bic": "DNBANOKK",
  "BankApproval": true
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankServiceRequest"
              },
              "example": {
  "CompanyId": "83085eff-9d79-4c31-af78-d0ff8c3dcf74",
  "Bic": "DNBANOKK",
  "BankApproval": true
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBankServiceRequest"
              },
              "example": {
  "CompanyId": "83085eff-9d79-4c31-af78-d0ff8c3dcf74",
  "Bic": "DNBANOKK",
  "BankApproval": true
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns service id. Request added for ZData approval",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Unknown BIC, contact ZData to have this bank added",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/services/bank/{companyId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Gets company services",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional state filter",
            "schema": {
              "$ref": "#/components/schemas/BankServiceState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service dto's",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankServiceResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankServiceResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankServiceResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v3/services/bank/{companyId}/{serviceId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Gets company service",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company id",
              "format": "uuid"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Service id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service dto",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankServiceResponse"
                },
                "example": {
  "Id": "b5012d7f-9240-479a-a79f-6285b1395739",
  "CompanyId": "eb09c06e-598e-4858-b101-27eb90ff71f0",
  "Name": "Agreenet for Donal Duck",
  "State": 0,
  "BIC": "DNBANOKK",
  "Created": "2022-09-01T09:16:15.2242174+02:00"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankServiceResponse"
                },
                "example": {
  "Id": "b5012d7f-9240-479a-a79f-6285b1395739",
  "CompanyId": "eb09c06e-598e-4858-b101-27eb90ff71f0",
  "Name": "Agreenet for Donal Duck",
  "State": 0,
  "BIC": "DNBANOKK",
  "Created": "2022-09-01T09:16:15.2242174+02:00"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankServiceResponse"
                },
                "example": {
  "Id": "b5012d7f-9240-479a-a79f-6285b1395739",
  "CompanyId": "eb09c06e-598e-4858-b101-27eb90ff71f0",
  "Name": "Agreenet for Donal Duck",
  "State": 0,
  "BIC": "DNBANOKK",
  "Created": "2022-09-01T09:16:15.2242174+02:00"
}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v3/statements/{companyId}": {
      "get": {
        "tags": [
          "Statement"
        ],
        "summary": "Returns bank statements for a given company. All statements are given in aggregated form, to get detailed transactions use the transactions link",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "uuid"
            }
          },
          {
            "name": "accountNo",
            "in": "query",
            "description": "Optional filtering on account number",
            "schema": {
              "type": "string",
              "description": "Optional filtering on account number",
              "default": "",
              "nullable": true
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Timeframe limitation, must be provided together with toDate",
            "schema": {
              "type": "string",
              "description": "Timeframe limitation, must be provided together with toDate",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Timeframe limitation, must be provided together with fromDate",
            "schema": {
              "type": "string",
              "description": "Timeframe limitation, must be provided together with fromDate",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional filtering on transaction state, state can be used to avoid downloading statements twice, use state link (PUT) to set state",
            "schema": {
              "$ref": "#/components/schemas/BankStatementState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementAggregatedResponse"
                },
                "example": {
  "Statements": [
    {
      "StatementId": "5abc4f7d-ff3b-4a03-a17b-2aef1de153f4",
      "Name": "Donal Duck",
      "AccountNumber": "123456789012",
      "AccountCurrency": "NOK",
      "ArchiveReference": "121212",
      "BankInformation": "NO124123 23123",
      "StructuredReference": "123123",
      "Amount": 55.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2285796+02:00",
      "ValueDate": "2022-09-01T09:16:15.2285835+02:00",
      "EntryReference": "123123",
      "TransactionCount": 1,
      "Links": [
        {
          "Rel": "details",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
        },
        {
          "Rel": "state",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
        }
      ]
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementAggregatedResponse"
                },
                "example": {
  "Statements": [
    {
      "StatementId": "5abc4f7d-ff3b-4a03-a17b-2aef1de153f4",
      "Name": "Donal Duck",
      "AccountNumber": "123456789012",
      "AccountCurrency": "NOK",
      "ArchiveReference": "121212",
      "BankInformation": "NO124123 23123",
      "StructuredReference": "123123",
      "Amount": 55.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2285796+02:00",
      "ValueDate": "2022-09-01T09:16:15.2285835+02:00",
      "EntryReference": "123123",
      "TransactionCount": 1,
      "Links": [
        {
          "Rel": "details",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
        },
        {
          "Rel": "state",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
        }
      ]
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementAggregatedResponse"
                },
                "example": {
  "Statements": [
    {
      "StatementId": "5abc4f7d-ff3b-4a03-a17b-2aef1de153f4",
      "Name": "Donal Duck",
      "AccountNumber": "123456789012",
      "AccountCurrency": "NOK",
      "ArchiveReference": "121212",
      "BankInformation": "NO124123 23123",
      "StructuredReference": "123123",
      "Amount": 55.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2285796+02:00",
      "ValueDate": "2022-09-01T09:16:15.2285835+02:00",
      "EntryReference": "123123",
      "TransactionCount": 1,
      "Links": [
        {
          "Rel": "details",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
        },
        {
          "Rel": "state",
          "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
        }
      ]
    }
  ]
}
              }
            }
          },
          "404": {
            "description": "Statements not found for this company",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid account number or date format",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/statements/{companyId}/entries/{entryId}": {
      "get": {
        "tags": [
          "Statement"
        ],
        "summary": "Returns bank statements for a given id in aggregated form. To get detailed transactions use the transactions link",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The company id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The company id",
              "format": "uuid"
            }
          },
          {
            "name": "entryId",
            "in": "path",
            "description": "The entry id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The entry id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatement"
                },
                "example": {
  "StatementId": "7553e7ad-7425-4f71-a8d2-e60ec0e53faf",
  "Name": "Donal Duck",
  "AccountNumber": "123456789012",
  "AccountCurrency": "NOK",
  "ArchiveReference": "121212",
  "BankInformation": "NO124123 23123",
  "StructuredReference": "123123",
  "Amount": 55.0,
  "AmountCurrency": "NOK",
  "Description": "Description",
  "BookingDate": "2022-09-01T09:16:15.2303759+02:00",
  "ValueDate": "2022-09-01T09:16:15.2303781+02:00",
  "EntryReference": "123123",
  "TransactionCount": 1,
  "Links": [
    {
      "Rel": "details",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
    },
    {
      "Rel": "state",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatement"
                },
                "example": {
  "StatementId": "7553e7ad-7425-4f71-a8d2-e60ec0e53faf",
  "Name": "Donal Duck",
  "AccountNumber": "123456789012",
  "AccountCurrency": "NOK",
  "ArchiveReference": "121212",
  "BankInformation": "NO124123 23123",
  "StructuredReference": "123123",
  "Amount": 55.0,
  "AmountCurrency": "NOK",
  "Description": "Description",
  "BookingDate": "2022-09-01T09:16:15.2303759+02:00",
  "ValueDate": "2022-09-01T09:16:15.2303781+02:00",
  "EntryReference": "123123",
  "TransactionCount": 1,
  "Links": [
    {
      "Rel": "details",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
    },
    {
      "Rel": "state",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatement"
                },
                "example": {
  "StatementId": "7553e7ad-7425-4f71-a8d2-e60ec0e53faf",
  "Name": "Donal Duck",
  "AccountNumber": "123456789012",
  "AccountCurrency": "NOK",
  "ArchiveReference": "121212",
  "BankInformation": "NO124123 23123",
  "StructuredReference": "123123",
  "Amount": 55.0,
  "AmountCurrency": "NOK",
  "Description": "Description",
  "BookingDate": "2022-09-01T09:16:15.2303759+02:00",
  "ValueDate": "2022-09-01T09:16:15.2303781+02:00",
  "EntryReference": "123123",
  "TransactionCount": 1,
  "Links": [
    {
      "Rel": "details",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/transactions"
    },
    {
      "Rel": "state",
      "Href": "https://bankservicedemo.zdata.no/api/v3/statements/c32e6b5b-ca63-48d0-91ab-d5c6cb781737/7eeda2b9-e57e-49e3-8591-f3fc2cad2cd7/state"
    }
  ]
}
              }
            }
          },
          "404": {
            "description": "Statements not found for this company",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User not authorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/statements/{companyId}/{statementId}/transactions": {
      "get": {
        "tags": [
          "Statement"
        ],
        "summary": "Returns all transactions for a given statement.",
        "description": "Renamed to /{companyId}/entries/{entryId}/transactions",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Id of company that owns the statement",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of company that owns the statement",
              "format": "uuid"
            }
          },
          {
            "name": "statementId",
            "in": "path",
            "description": "Unique StatementId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique StatementId",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "3ab329da-08c9-4ad9-912a-1fa9420d625e",
  "Transactions": [
    {
      "StatementId": "3b85b1d9-be26-47b7-bcd8-13b3367aab17",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2343021+02:00",
      "Type": "Debit",
      "TransactionId": "3edf2b2a-937c-4a5f-ad35-49dd100b2d2b",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "3ab329da-08c9-4ad9-912a-1fa9420d625e",
  "Transactions": [
    {
      "StatementId": "3b85b1d9-be26-47b7-bcd8-13b3367aab17",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2343021+02:00",
      "Type": "Debit",
      "TransactionId": "3edf2b2a-937c-4a5f-ad35-49dd100b2d2b",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "3ab329da-08c9-4ad9-912a-1fa9420d625e",
  "Transactions": [
    {
      "StatementId": "3b85b1d9-be26-47b7-bcd8-13b3367aab17",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2343021+02:00",
      "Type": "Debit",
      "TransactionId": "3edf2b2a-937c-4a5f-ad35-49dd100b2d2b",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v3/statements/{companyId}/entries/{entryId}/transactions": {
      "get": {
        "tags": [
          "Statement"
        ],
        "summary": "Returns all transactions for a given statement.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Id of company that owns the statement",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of company that owns the statement",
              "format": "uuid"
            }
          },
          {
            "name": "entryId",
            "in": "path",
            "description": "Unique statement entry id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique statement entry id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "212a70db-f103-4608-a097-19b8833ff7d7",
  "Transactions": [
    {
      "StatementId": "1765081b-87e8-40d9-bf40-338d1fe23e65",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2350656+02:00",
      "Type": "Debit",
      "TransactionId": "f24f3aa6-f9a5-4264-b271-a0df7074927d",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "212a70db-f103-4608-a097-19b8833ff7d7",
  "Transactions": [
    {
      "StatementId": "1765081b-87e8-40d9-bf40-338d1fe23e65",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2350656+02:00",
      "Type": "Debit",
      "TransactionId": "f24f3aa6-f9a5-4264-b271-a0df7074927d",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankStatementDetailsResponse"
                },
                "example": {
  "StatementId": "212a70db-f103-4608-a097-19b8833ff7d7",
  "Transactions": [
    {
      "StatementId": "1765081b-87e8-40d9-bf40-338d1fe23e65",
      "Name": "Some name",
      "AccountNumber": "1233456",
      "AccountCurrency": "NOK",
      "ArchiveReference": "12345677",
      "BankInformation": "123123",
      "StructuredReference": "31231231",
      "Amount": 56.0,
      "AmountCurrency": "NOK",
      "Description": "Description",
      "BookingDate": "2022-09-01T09:16:15.2350656+02:00",
      "Type": "Debit",
      "TransactionId": "f24f3aa6-f9a5-4264-b271-a0df7074927d",
      "InvoiceNumber": "123345",
      "ReceiverName": "Donald Duck",
      "ReceiverAccount": "123445678978",
      "SenderName": "Dolly Duck",
      "SenderAccount": "098765432112"
    }
  ]
}
              }
            }
          }
        }
      }
    },
    "/api/v3/statements/{companyId}/{statementId}/state": {
      "put": {
        "tags": [
          "Statement"
        ],
        "summary": "Updates state of all transactions for a given statement.",
        "operationId": "SetStatementState",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Id of company that owns the statement",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of company that owns the statement",
              "format": "uuid"
            }
          },
          {
            "name": "statementId",
            "in": "path",
            "description": "Unique StatementId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique StatementId",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StatementUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatementUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StatementUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StatementUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StatementUpdateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementUpdateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementUpdateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets user details",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User id",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "Id": "123321123",
  "CompanyId": "9c8c7f4d-fd49-4c62-91a5-0c887ec20c69",
  "Username": "duck@duck.com",
  "Email": "duck@duck.com",
  "Name": "Duck corp",
  "PhoneNumber": "52 52 52 52",
  "ActiveUser": true
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "Id": "123321123",
  "CompanyId": "9c8c7f4d-fd49-4c62-91a5-0c887ec20c69",
  "Username": "duck@duck.com",
  "Email": "duck@duck.com",
  "Name": "Duck corp",
  "PhoneNumber": "52 52 52 52",
  "ActiveUser": true
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                },
                "example": {
  "Id": "123321123",
  "CompanyId": "9c8c7f4d-fd49-4c62-91a5-0c887ec20c69",
  "Username": "duck@duck.com",
  "Email": "duck@duck.com",
  "Name": "Duck corp",
  "PhoneNumber": "52 52 52 52",
  "ActiveUser": true
}
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v3/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "POST new user",
        "requestBody": {
          "description": "Update model",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "202": {
            "description": "User created, but failed to set password",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Company not found"
          }
        }
      }
    },
    "/api/v3/users/resetpassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Sends mail to user for password reset",
        "requestBody": {
          "description": "Model for password reset",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              },
              "example": {
  "Username": "myusername"
}
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              },
              "example": {
  "Username": "myusername"
}
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              },
              "example": {
  "Username": "myusername"
}
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              },
              "example": {
  "Username": "myusername"
}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BankAccountAliases": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "description": "IBAN",
            "nullable": true
          },
          "normalizedIban": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "plusGirot": {
            "type": "string",
            "description": "Optional alias for PlusGirot",
            "nullable": true
          },
          "bankGirot": {
            "type": "string",
            "description": "Optional alias for BankGirot",
            "nullable": true
          },
          "giroKonto": {
            "type": "string",
            "description": "Optional alias for GiroKonto",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewBankAccountRequest": {
        "required": [
          "accountNumber",
          "bic",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company id to associate with bankaccount",
            "format": "uuid"
          },
          "accountNumber": {
            "minLength": 6,
            "type": "string",
            "description": "Account number"
          },
          "normalizedAccountNumber": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "bic": {
            "type": "string",
            "description": "Bank identifier code"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "ledger": {
            "type": "string",
            "description": "Ledger",
            "nullable": true
          },
          "aliases": {
            "$ref": "#/components/schemas/BankAccountAliases"
          }
        },
        "additionalProperties": false,
        "description": "Dto for new BankAccounts. May be expanded to include accountGroupId and agreementId."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "BankAccountResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "Account identification",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "Bank identification code",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "accountGroupId": {
            "type": "string",
            "description": "Account group identification",
            "format": "uuid",
            "nullable": true
          },
          "ledger": {
            "type": "string",
            "description": "Ledger",
            "nullable": true
          },
          "aliases": {
            "$ref": "#/components/schemas/BankAccountAliases"
          },
          "connectionProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Connection properties",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListCompanyAccountsResponse": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountReadinessResponse": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company id of account",
            "format": "uuid"
          },
          "approvalsRequired": {
            "type": "integer",
            "description": "Number of approvals needed for bank upload",
            "format": "int32"
          },
          "hasBic": {
            "type": "boolean",
            "description": "Account has BIC set"
          },
          "hasCurrency": {
            "type": "boolean",
            "description": "Account has currency set"
          },
          "hasBankIntegration": {
            "type": "boolean",
            "description": "Account has bank intregration set. If false, must be handled by ZData"
          },
          "readyForPayments": {
            "type": "boolean",
            "description": "Indicates whether account is ready for posting payments",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UpdateBankAccountRequest": {
        "required": [
          "bic"
        ],
        "type": "object",
        "properties": {
          "bic": {
            "type": "string",
            "description": "Bank identifier code"
          },
          "currency": {
            "type": "string",
            "description": "Currency",
            "nullable": true
          },
          "ledger": {
            "type": "string",
            "description": "Ledger",
            "nullable": true
          },
          "aliases": {
            "$ref": "#/components/schemas/BankAccountAliases"
          }
        },
        "additionalProperties": false,
        "description": "Dto for new BankAccounts. May be expanded to include accountGroupId and agreementId."
      },
      "BankAccountCompanySwitchRequest": {
        "required": [
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "New company id",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AccountGroupAccount": {
        "required": [
          "accountNumber",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Accounts id",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string",
            "description": "Accounts bban"
          }
        },
        "additionalProperties": false
      },
      "AccountGroupUser": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User Id"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AccountGroupResponse": {
        "required": [
          "companyId",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account group id"
          },
          "name": {
            "type": "string",
            "description": "Account group name"
          },
          "companyId": {
            "type": "string",
            "description": "Account group company id",
            "format": "uuid"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountGroupAccount"
            },
            "description": "Accounts",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountGroupUser"
            },
            "description": "Users",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateAccountGroupNameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountGroupRequest": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountGroupUserRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AccountGroupAccountRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BalanceResponse": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Account number",
            "nullable": true,
            "example": "13370101337"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Balance date",
            "format": "date-time"
          },
          "balanceBooked": {
            "type": "number",
            "description": "Booked balance in bank",
            "format": "double",
            "example": 1337
          },
          "balanceAvailable": {
            "type": "number",
            "description": "Available balance in bank",
            "format": "double",
            "nullable": true,
            "example": 1033.7
          }
        },
        "additionalProperties": false
      },
      "CompanyState": {
        "enum": [
          "0 - Unknown",
          "1 - Active",
          "2 - WaitForZDataApprove",
          "999 - Deleted"
        ],
        "type": "integer",
        "format": "int32"
      },
      "CompanyDetailResponse": {
        "required": [
          "companyId",
          "organizationNumber",
          "state"
        ],
        "type": "object",
        "properties": {
          "organizationNumber": {
            "type": "string",
            "description": "Company organization number. If matched in Brønnøysund, company name and adress will be overwritten"
          },
          "companyId": {
            "type": "string",
            "description": "Company id",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/CompanyState"
          },
          "parentCompanyId": {
            "type": "string",
            "description": "Id of parent company. Can be used to request subsidiary status for company. NOT IMPLEMENTED FOR EXTERNAL USE!",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "Company zipcode",
            "nullable": true
          },
          "zipArea": {
            "type": "string",
            "description": "Company zip area",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Company country",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewCompanyRequest": {
        "required": [
          "organizationNumber"
        ],
        "type": "object",
        "properties": {
          "organizationNumber": {
            "type": "string",
            "description": "Company organization number. If matched in Brønnøysund, company name and adress will be overwritten"
          },
          "normalizedOrganizationNumber": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "companyId": {
            "type": "string",
            "description": "Desired company id (optional)",
            "format": "uuid",
            "nullable": true
          },
          "parentCompanyId": {
            "type": "string",
            "description": "Id of parent company. Can be used to request subsidiary status for company.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Company name. Mandatory for companies outside Norway",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "Company zipcode",
            "nullable": true
          },
          "zipArea": {
            "type": "string",
            "description": "Company zip area",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Company country. Mandatory for companies outside Norway",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResponse": {
        "required": [
          "companyId",
          "email",
          "id",
          "name",
          "phoneNumber",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User id"
          },
          "companyId": {
            "type": "string",
            "description": "Company id",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "email": {
            "type": "string",
            "description": "Users email"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number"
          },
          "activeUser": {
            "type": "boolean"
          },
          "accountingSystemUser": {
            "type": "string",
            "description": "Username in accounting system",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiLink": {
        "type": "object",
        "properties": {
          "rel": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeadLetterEventContentResponse": {
        "type": "object",
        "properties": {
          "event": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeadLetterEventResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionName": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeadLetterEventResponsePaginatedResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "take": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeadLetterEventResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankEventSubscriptionResponse": {
        "type": "object",
        "properties": {
          "subscriptionName": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "nullable": true
          },
          "provisioningState": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "topic": {
            "type": "string",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankEventSubscriptionResponsePaginatedResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "take": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankEventSubscriptionResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventSubscriptionDestination": {
        "type": "object",
        "properties": {
          "endpointUrl": {
            "type": "string",
            "nullable": true
          },
          "maxEventsPerBatch": {
            "type": "integer",
            "format": "int32"
          },
          "preferredBatchSizeInKilobytes": {
            "type": "integer",
            "format": "int32"
          },
          "azureActiveDirectoryApplicationIdOrUri": {
            "type": "string",
            "nullable": true
          },
          "azureActiveDirectoryTenantId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventSubscriptionRequest": {
        "type": "object",
        "properties": {
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "destination": {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        },
        "additionalProperties": false
      },
      "EventSubscriptionCompanyIdsBatchRequest": {
        "type": "object",
        "properties": {
          "companyIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "destination": {
            "$ref": "#/components/schemas/EventSubscriptionDestination"
          }
        },
        "additionalProperties": false
      },
      "ApprovalEnabledResponse": {
        "type": "object",
        "properties": {
          "preApprovalEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TransactionState": {
        "enum": [
          "0 - Submitted",
          "1 - QueuedForApproval",
          "2 - Rejected",
          "3 - ReadyForTransfer",
          "4 - PendingBank",
          "5 - RejectedBank",
          "6 - AcceptedBank",
          "7 - Completed",
          "8 - DismissedByZData"
        ],
        "type": "integer",
        "format": "int32"
      },
      "PaymentStatusResponse": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "sourceReference": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/TransactionState"
          },
          "executionDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentsResponse": {
        "required": [
          "payments",
          "total"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentStatusResponse"
            },
            "description": "Transactions"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettlementDto": {
        "type": "object",
        "properties": {
          "bookingDate": {
            "type": "string",
            "description": "Payment date",
            "format": "date-time",
            "nullable": true
          },
          "valueDate": {
            "type": "string",
            "description": "Value date",
            "format": "date-time",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "description": "Exchange rate",
            "format": "double"
          },
          "reference": {
            "type": "string",
            "description": "Bank reference",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentLineResponse": {
        "required": [
          "amount",
          "paymentId",
          "sourceReference",
          "status"
        ],
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "Payment id",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionState"
          },
          "rejectionCode": {
            "type": "string",
            "description": "Rejection code if payment has been rejected by bank",
            "nullable": true
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Rejection message from bank, if payment has been rejected",
            "nullable": true
          },
          "sourceReference": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "description": "Original invoice amount",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "executionDate": {
            "type": "string",
            "format": "date-time"
          },
          "creditorName": {
            "type": "string",
            "nullable": true
          },
          "creditorAccountNumber": {
            "type": "string",
            "nullable": true
          },
          "creditorAccountCurrency": {
            "type": "string",
            "nullable": true
          },
          "chargeAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "chargeCurrency": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementDto"
          }
        },
        "additionalProperties": false
      },
      "PaymentSummary": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstExecutionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastExecutionDate": {
            "type": "string",
            "format": "date-time"
          },
          "amounts": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyPaymentsResponse": {
        "type": "object",
        "properties": {
          "summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentSummary"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PaymentReference": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "sourceReference": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookedPayment": {
        "type": "object",
        "properties": {
          "bookedAmount": {
            "type": "number",
            "format": "double"
          },
          "accountCurrency": {
            "type": "string",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "format": "double"
          },
          "bookingDate": {
            "type": "string",
            "format": "date-time"
          },
          "valueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bankReference": {
            "type": "string",
            "nullable": true
          },
          "chargeAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "chargeCurrency": {
            "type": "string",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentReference"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentsMovementsResponse": {
        "type": "object",
        "properties": {
          "bookedPayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookedPayment"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RejectionDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for rejection",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DismissalStatus": {
        "enum": [
          "0 - AlreadyApproved",
          "1 - Unauthorized",
          "2 - Dismissed",
          "3 - NotFound",
          "4 - AlreadyDismissed",
          "5 - NotApprovable"
        ],
        "type": "integer",
        "format": "int32"
      },
      "PaymentDismissalResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DismissalStatus"
          },
          "success": {
            "type": "boolean",
            "description": "Whether payments were dismissed or not",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "Message explaining status",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PaymentApproveResult": {
        "enum": [
          "0 - UserAlreadyApproved",
          "1 - Unauthorized",
          "2 - Approved",
          "3 - ApprovedWithRemaining",
          "4 - SenderCantApprove",
          "5 - PaymentNotFound",
          "6 - FileAlreadyApproved"
        ],
        "type": "integer",
        "format": "int32"
      },
      "PaymentApprovalResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentApproveResult"
          },
          "approvalsRemaining": {
            "type": "integer",
            "description": "Number of approvals before payment is sent to bank",
            "format": "int32"
          },
          "success": {
            "type": "boolean",
            "description": "Whether approval was successful",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "Message explaining status",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ApprovalDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Id of approver",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Approver name",
            "nullable": true
          },
          "approvedAt": {
            "type": "string",
            "description": "Time of approval",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PaymentApprovalInfoResponse": {
        "type": "object",
        "properties": {
          "approvalsRequired": {
            "type": "integer",
            "description": "Total number of approvals required",
            "format": "int32"
          },
          "approvals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethod": {
        "enum": [
          "1 - Transfer",
          "2 - InterCompany"
        ],
        "type": "integer",
        "format": "int32"
      },
      "Priority": {
        "enum": [
          "1 - Normal",
          "2 - High"
        ],
        "type": "integer",
        "format": "int32"
      },
      "PaymentPurpose": {
        "enum": [
          "1 - Bonus",
          "2 - Salary",
          "3 - Pension",
          "4 - Tax"
        ],
        "type": "integer",
        "format": "int32"
      },
      "AccountType": {
        "enum": [
          "0 - BBAN",
          "1 - IBAN",
          "2 - PlusGirot",
          "3 - BankGirot",
          "4 - GiroKonto"
        ],
        "type": "integer",
        "format": "int32"
      },
      "Creditor": {
        "required": [
          "accountNumber",
          "accountType",
          "countryCode",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Receiver name"
          },
          "countryCode": {
            "type": "string",
            "description": "Receiver country code"
          },
          "accountNumber": {
            "type": "string",
            "description": "Receiver account number"
          },
          "bic": {
            "type": "string",
            "description": "Receiver BIC-/SWIFT code",
            "nullable": true
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "bankCode": {
            "type": "string",
            "description": "Clearing system bank code (Sort code, fedwire code, routing number). Normally used outside EU",
            "nullable": true
          },
          "bankCountryCode": {
            "type": "string",
            "description": "Creditors bank country code",
            "nullable": true
          },
          "address": {
            "maxLength": 128,
            "type": "string",
            "description": "Address of receiver",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 16,
            "type": "string",
            "description": "Post code of receiver",
            "nullable": true
          },
          "zipArea": {
            "maxLength": 128,
            "type": "string",
            "description": "Post Area of receiver",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentLine": {
        "required": [
          "amount",
          "creditor",
          "currency",
          "executionDate",
          "sourceReference"
        ],
        "type": "object",
        "properties": {
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "paymentPurpose": {
            "$ref": "#/components/schemas/PaymentPurpose"
          },
          "executionDate": {
            "type": "string",
            "format": "date-time"
          },
          "sourceReference": {
            "type": "string",
            "description": "Original ERP-system reference"
          },
          "regulatoryReportingCode": {
            "type": "integer",
            "description": "Declaration code",
            "format": "int32"
          },
          "regulatoryReportingInfo": {
            "type": "string",
            "description": "Declaration text",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Invoice amount. Creditnotes are accepted",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "Invoice amount currency"
          },
          "structuredReference": {
            "type": "string",
            "description": "KID, FIK, OCR, Creditor reference",
            "nullable": true
          },
          "invoiceNo": {
            "type": "string",
            "description": "Invoice number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Invoice message",
            "nullable": true
          },
          "statementMessage": {
            "maxLength": 35,
            "type": "string",
            "description": "If present, can be used for text on beneficiary's statement of account",
            "nullable": true
          },
          "creditor": {
            "$ref": "#/components/schemas/Creditor"
          }
        },
        "additionalProperties": false
      },
      "CreatePaymentsRequest": {
        "required": [
          "accountNumber",
          "messageId",
          "paymentLines"
        ],
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string"
          },
          "singlePayments": {
            "type": "boolean",
            "description": "Always send single payments to creditor. This will not work with credit notes."
          },
          "paymentLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentLine"
            }
          }
        },
        "additionalProperties": false,
        "description": "A list of payments to create for a given account number."
      },
      "InpaymentState": {
        "enum": [
          "0 - Queued",
          "1 - Transferred",
          "2 - Error"
        ],
        "type": "integer",
        "format": "int32"
      },
      "TransactionType": {
        "enum": [
          "0 - Payment",
          "1 - Charge"
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReceivableDto": {
        "type": "object",
        "properties": {
          "receivableId": {
            "type": "string",
            "description": "Unique reference for receivable",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string",
            "description": "Deposit account",
            "nullable": true
          },
          "debtorAccountNumber": {
            "type": "string",
            "description": "Withdrawal account",
            "nullable": true
          },
          "debtorName": {
            "type": "string",
            "description": "Customer name",
            "nullable": true
          },
          "debtorAddress": {
            "type": "string",
            "description": "Customer address",
            "nullable": true
          },
          "archiveReference": {
            "type": "string",
            "description": "Bank reference",
            "nullable": true
          },
          "structuredReference": {
            "type": "string",
            "description": "KID, FIK, OCR (SCOR reference)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Unstructured reference (payment message)",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice number",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "Processed date",
            "format": "date-time"
          },
          "valueDate": {
            "type": "string",
            "description": "Exchange date",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount or fee amount",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "Payment or fee currency type",
            "nullable": true
          },
          "bookedAmount": {
            "type": "number",
            "description": "Booked amount",
            "format": "double",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "description": "Exchange rate",
            "format": "double",
            "nullable": true
          },
          "accountCurrency": {
            "type": "string",
            "description": "Currency of bank account;",
            "nullable": true
          },
          "chargeAmount": {
            "type": "number",
            "description": "Charge amount",
            "format": "double",
            "nullable": true
          },
          "chargeCurrency": {
            "type": "string",
            "description": "Charge Currency",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, only exists on error state",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReceivablesResponse": {
        "required": [
          "receivables",
          "state",
          "total"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/InpaymentState"
          },
          "receivables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceivableDto"
            },
            "description": "Transactions"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReceivableDtoPaginatedResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "take": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceivableDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateReceivablesBatchRequest": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/InpaymentState"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message (used if State is set to Error)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateReceivablesRequest": {
        "required": [
          "id",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/InpaymentState"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message (used if State is set to Error)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Inpayment Id",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PaymentRecipientResponse": {
        "type": "object",
        "properties": {
          "receiptId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRecipientRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewBankServiceRequest": {
        "required": [
          "bic",
          "companyId"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company id to register associate with service",
            "format": "uuid"
          },
          "bic": {
            "type": "string",
            "description": "Bank identifier code"
          },
          "bankApproval": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BankServiceState": {
        "enum": [
          "0 - Unknown",
          "1 - Active",
          "2 - WaitForSigning",
          "3 - WaitForBankApprove",
          "4 - WaitForZDataApprove",
          "5 - Deactivated"
        ],
        "type": "integer",
        "format": "int32"
      },
      "BankServiceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Service id",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "description": "Company id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Service name",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/BankServiceState"
          },
          "bic": {
            "type": "string",
            "description": "Service BIC",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Service creation time",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BankStatementState": {
        "enum": [
          "0 - Created",
          "1 - Transferred",
          "2 - Error"
        ],
        "type": "integer",
        "format": "int32"
      },
      "BankStatement": {
        "required": [
          "accountCurrency",
          "accountNumber",
          "amount",
          "archiveReference",
          "bookingDate",
          "valueDate"
        ],
        "type": "object",
        "properties": {
          "entryReference": {
            "type": "string",
            "description": "This is a reference set on the statement entry level",
            "nullable": true
          },
          "transactionCount": {
            "type": "integer",
            "description": "Number of transactions associated with this statement",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiLink"
            },
            "nullable": true
          },
          "statementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Owner of the account",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "Account"
          },
          "accountCurrency": {
            "type": "string",
            "description": "Account currency code"
          },
          "archiveReference": {
            "type": "string",
            "description": "Bank reference"
          },
          "bankInformation": {
            "type": "string",
            "description": "Bank information",
            "nullable": true
          },
          "structuredReference": {
            "type": "string",
            "description": "KID, FIC, OCR (SCOR  reference)",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Payment amount or fee amount",
            "format": "double"
          },
          "amountCurrency": {
            "type": "string",
            "description": "Currency of amount",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Unstructured reference (payment message)",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "Processed date",
            "format": "date-time"
          },
          "valueDate": {
            "type": "string",
            "description": "Exchange date",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BankStatementAggregatedResponse": {
        "type": "object",
        "properties": {
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankStatement"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankStatementTransaction": {
        "required": [
          "accountCurrency",
          "accountNumber",
          "amount",
          "archiveReference",
          "bookingDate",
          "transactionId",
          "valueDate"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of transaction (debit or credit)",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Unique reference for transaction",
            "format": "uuid"
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice number",
            "nullable": true
          },
          "receiverName": {
            "type": "string",
            "description": "Name of receiver. Used if the transaction is a payment.",
            "nullable": true
          },
          "receiverAccount": {
            "type": "string",
            "description": "Account of receiver. Used if the transaction is a payment.",
            "nullable": true
          },
          "senderName": {
            "type": "string",
            "description": "Name of sender. Used if transaction is a ingoing payment.",
            "nullable": true
          },
          "senderAccount": {
            "type": "string",
            "description": "Account of sender. Used if the transaction is a ingoing payment.",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message, only exist on error state",
            "nullable": true
          },
          "statementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Owner of the account",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "description": "Account"
          },
          "accountCurrency": {
            "type": "string",
            "description": "Account currency code"
          },
          "archiveReference": {
            "type": "string",
            "description": "Bank reference"
          },
          "bankInformation": {
            "type": "string",
            "description": "Bank information",
            "nullable": true
          },
          "structuredReference": {
            "type": "string",
            "description": "KID, FIC, OCR (SCOR  reference)",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Payment amount or fee amount",
            "format": "double"
          },
          "amountCurrency": {
            "type": "string",
            "description": "Currency of amount",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Unstructured reference (payment message)",
            "nullable": true
          },
          "bookingDate": {
            "type": "string",
            "description": "Processed date",
            "format": "date-time"
          },
          "valueDate": {
            "type": "string",
            "description": "Exchange date",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BankStatementDetailsResponse": {
        "type": "object",
        "properties": {
          "statementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankStatementTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatementUpdateRequest": {
        "required": [
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/BankStatementState"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message (used if State is set to Error)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatementUpdateResponse": {
        "type": "object",
        "properties": {
          "statementId": {
            "type": "string",
            "format": "uuid"
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "updatedTransactions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewUserRequest": {
        "required": [
          "companyId",
          "email",
          "name",
          "phoneNumber",
          "username"
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Company id to associate with user",
            "format": "uuid",
            "example": "c32e6b5b-ca63-48d0-91ab-d5c6cb781737"
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "user1@mycompany.com"
          },
          "email": {
            "type": "string",
            "description": "Users email",
            "format": "email",
            "example": "user1@mycompany.com"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Ola Nordmann"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "90001337"
          },
          "password": {
            "type": "string",
            "description": "Password (optional), if not set user will receive email to complete registration",
            "nullable": true,
            "example": "sdf35asty4q3g5ehgg%¤"
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://id.zdata.no/connect/authorize",
            "scopes": {
              "bankservice": "Access to BankService API"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://id.zdata.no/connect/token",
            "scopes": {
              "bankservice": "Access to BankService API"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "openid",
        "profile",
        "bankservice"
      ]
    }
  ]
}